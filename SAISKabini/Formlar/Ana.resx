<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvWPRns2jxE7No8ROrV
        QBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7t1ED+vZPajr2T3+69k9/+vZ
        Pf/r2T3+69k9pu3bNw4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA399ACOvZPcjr2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/s2T3F29tJBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOraPnzr2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+zZPXkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr2T3Y69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/6tg6/+DDG//dvhH+69k9zuvbPT8AAAAAAAAAAAAAAAAAAAAA69k9+OvZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/9/EGv/XswD/2LUD/+vZPf/r2T3x6tVAGAAAAAAAAAAAAAAAAOzZ
        Pd/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/ZuAj/17MA/9q5Cf/r2T3/69k9/+vZPVgAAAAAAAAAAAAA
        AADr2T2a69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/3LwP/9ezAP/fwxn/69k9/+vZPf/q2Tw8AAAAAAAA
        AAAAAAAA7dtAHOvZPfPr2T3/69k9/+vZPf/r2T3/69k9/+bPLf/YtQT/6dU3/+vZPf/s2j24AAAAAAAA
        AAAAAAAAAAAAAAAAAADq2j1g69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/59Q1tuvZPf/r2T3g6Nw6FgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOzaPJDr2T3/69k9/+vZPf/r2T3/69o9jwAAAADr2j2W7ds7KwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/1SsG7Nk9xevZPf/r2T3/69k9xP/VKwYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvYOxrr2T3m69k95uvWPRkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA69s9MurbPjEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA+B8AAPAPAADwDwAA4AMAAOABAADgAQAA4AEAAPAB
        AAD4AwAA+BcAAPw/AAD+fwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5uYzCuvaPEzr2T6A69k9ouvZPaLr2T6A69o9S+bmMwoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA5tlAFOzYPpHr2T3369k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k99+za
        PJDy10MTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvXPEDr2T3r69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPerr2z0/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr2j1L69k9+uvZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPfrq2TtJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6txAJOvZPe/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vaPe7p2jwiAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr2T2v69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+zaPasAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7ds7OOvZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+zZ
        PzUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr2D2K69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/6tc6/+LH
        If/bvA7/4cUe9+vZPcHq2jx76tVADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvZ
        Ps/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+fS
        M//auAf/17MA/9ezAP/bugz/69k9/+vZPf/r2j3a6txAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA69k96uvZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/q1zr/2bgI/9ezAP/XswD/17MA/9m2Bf/r2T3/69k9/+vZPf/r2T3c4+M5CQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADr2T3569k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+HIIf/XswD/17MA/9ezAP/XswD/17QC/+vZPf/r2T3/69k9/+vZPf/s2TxqAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvZPOjr2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/3L0P/9ezAP/XswD/17MA/9ezAP/Ztwb/69k9/+vZPf/r2T3/69k9/+vY
        PrIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA69k8vuvZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/bugr/17MA/9ezAP/XswD/17MA/929EP/r2T3/69k9/+vZ
        Pf/r2T3/69k9yQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADq2T1669k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/929EP/XswD/17MA/9ezAP/XswD/4cgh/+vZ
        Pf/r2T3/69k9/+vZPf/q2T6uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO3cPh3r2T3669k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/5Msm/9ezAP/XswD/17MA/9e0
        Av/q1Tj/69k9/+vZPf/r2T3/69k9/+rYPlYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOvY
        PYrr2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/q2Tz/27oK/9ez
        AP/XswD/4cUd/+vZPf/r2T3/69k9/+vZPf/r2T7L//8AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4+M5CeraPNPr2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/o0zP/2LUD/9q5C//r1zv/69k9/+vZPf/r2T3/69k98u3bPSoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA7ds7K+vZPfLr2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/mzyz46dQ1/uvZPf/r2T3/69k9/+vZPf3r2jxMAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6do9U+vZPf7r2T3/69k9/+vZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/evbPE3q2TyH69k9/+vZPf/r2T3/6to+fAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA69k9fuvZPf/r2T3/69k9/+vZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2D19AAAAAP//VQPq2Ty669k9/+vZPbD//wABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wAC69k9sOvZ
        Pf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPf/r2T3/69k9sP//AAIAAAAAAAAAAO3bNw7r2T2n5uYzCgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADu3UQP69k92OvZPf/r2T3/69k9/+vZPf/r2T3/69k9/+vZPNfu3UQPAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADs2j4p69k98evZPf/r2T3/69k9/+vZPf/r2j3u6tY+JQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADr2j1L69k9/evZPf/r2T3/69k9/evaPUsAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADq2T1669k9/+vZPf/s2T15AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAHq2T6u6tk+rv//
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOPj
        OQnj4zkJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////8P///4Af//8AD//+AAf//AAD//gAAf/4A
        AH/8AAAf/AAAB/wAAAP8AAAD/AAAAfwAAAH+AAAB/gAAA/4AAAP/AAAH/4AAD//AAh//4Acf/+AHv//w
        D///+B////w////+f////n//////////////////
</value>
  </data>
</root>